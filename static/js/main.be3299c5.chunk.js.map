{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/corona.jpg","App.js","reportWebVitals.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","modifiedData","fetchDailyData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","console","log","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","style","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","src","Corona","alt","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be3299c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3ylMN\",\"card\":\"Cards_card__XRcrS\",\"infected\":\"Cards_infected__1X9aj\",\"recovered\":\"Cards_recovered__kAh07\",\"deaths\":\"Cards_deaths__oULrP\"};","import React from \"react\";\r\nimport {Card, CardContent, Typography,Grid} from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\n\r\nconst Cards=({data:{confirmed,recovered,deaths,lastUpdate}})=>{\r\n    if(!confirmed){\r\n        return \"Loading...\";\r\n    }\r\n   \r\n    return(\r\n        <div className={styles.container} >\r\n            <Grid container spacing={3} justify=\"center\" >\r\n                <Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.infected)} >\r\n                   <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Infected\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent> \r\n                </Grid>\r\n\r\n                < Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}  >\r\n                   <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Recovered\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent> \r\n                </Grid>\r\n\r\n                <Grid item component ={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}  >\r\n                   <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >\r\n                            Deaths\r\n                        </Typography>\r\n                        <Typography variant=\"h5\" >\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/>  \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\" >\r\n                            {new Date(lastUpdate).toDateString()}\r\n                        </Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent> \r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\nexport default Cards","import axios from \"axios\";\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData= async (country)=>{\r\n    let changeableUrl=url;\r\n    \r\n    if(country){\r\n        changeableUrl=`${url}/countries/${country}`\r\n    }\r\n\r\n    try {\r\n        const {data: { confirmed,recovered,deaths,lastUpdate} }= await axios.get(changeableUrl);\r\n\r\n        const modifiedData={confirmed,recovered,deaths,lastUpdate}\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchDailyData=async()=>{\r\n    try {\r\n        const {data} = await axios.get(\"https://covid19.mathdro.id/api/daily\");\r\n        const modifiedData=data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        \r\n    }\r\n}\r\n\r\nexport const fetchCountries = async ()=>{\r\n    try{\r\n        const {data:{countries}}= await axios.get(\"https://covid19.mathdro.id/api/countries\");\r\n        \r\n        return countries.map((country)=>country.name);\r\n        \r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, {useState,useEffect} from \"react\";\r\nimport \"./Chart.module.css\";\r\nimport {fetchDailyData} from \"../../api\";\r\nimport {Line , Bar} from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\n\r\nconst Chart=({data,country})=>{\r\n    const [dailyData,setDailyData]=useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI=async()=>{\r\n            setDailyData( await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n        \r\n    },[])\r\n\r\n    const lineChart=(\r\n        \r\n        dailyData.length !== 0 ?(\r\n        <Line \r\n            data={{\r\n            \r\n              labels:dailyData.map(( { date } )=>date),\r\n              datasets: [{\r\n                  data: dailyData.map(({confirmed})=>confirmed),\r\n                  label:\"Infected\",\r\n                  borderColor:\"#3333ff\",\r\n                  fill:true,\r\n              },{\r\n                data: dailyData.map(({deaths})=>deaths),\r\n                label:\"Deaths\",\r\n                borderColor:\"red\",\r\n                backgroundColor: \"rgba(255,0,0,0.5)\",\r\n                fill:true,\r\n              }],  \r\n            }}\r\n        />):null\r\n    );\r\n\r\n\r\n    const barChar = (\r\n        data.confirmed ? \r\n        (\r\n            <Bar\r\n                data={{\r\n                    labels:['Infected' , 'Recovered' , 'Deaths'],\r\n                    datasets:[{\r\n                        label:\"People\",\r\n                        backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.9)'],\r\n                        data:[data.confirmed.value, data.recovered.value,data.deaths.value]\r\n                    }],\r\n                    \r\n                }}\r\n                options={{\r\n                    legend:{display:false},\r\n                    title:{display:true , text:`Current state in ${country}`}\r\n                }}\r\n            />\r\n        ):null\r\n    )\r\n\r\n    return(\r\n        <div className={styles.container} >\r\n            {country ? barChar:lineChart}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Chart","import React, {useState,useEffect} from \"react\";\r\nimport {NativeSelect, FormControl} from \"@material-ui/core\";\r\nimport {fetchCountries} from \"../../api\";\r\nimport style from \"./CountryPicker.module.css\";\r\n\r\n\r\nconst CountryPicker=({handleCountryChange})=>{\r\n\r\n    const [fetchedCountries,setFetchedCountries]=useState([]);\r\n    \r\n    useEffect(()=>{\r\n        const fetchAPI= async()=>{\r\n            setFetchedCountries( await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    return(\r\n        <FormControl className={style.formControl} >\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)} >\r\n                <option value=\"\" >Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country} >{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\n\r\nexport default CountryPicker","export default __webpack_public_path__ + \"static/media/corona.3d836c2e.jpg\";","import React,{Component} from \"react\";\nimport {Cards,Chart,CountryPicker} from \"./components\";\nimport style from \"./App.module.css\";\nimport {fetchData} from \"./api\";\nimport Corona from \"./components/corona.jpg\";\n\nclass App extends Component{\n  state={\n    data:{},\n    country:\"\"\n  }\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n    this.setState({data:fetchedData});  \n  }\n\n  handleCountryChange=async (country) =>{\n    \n    const fetchedData = await fetchData(country);\n\n    this.setState({data:fetchedData , country:country}); \n    \n    \n  }\n\n  render(){\n    const { data , country }=this.state;\n   \n    return (\n      \n      <div className={style.container}>\n        <img src={Corona} alt=\"Corona-img\" ></img>\n        <h1><span className=\"span\" >Corona</span> Virus</h1>\n        <Cards data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\n        <Chart data={data} country={country} />\n\n        <h3>Created By Gio Dzirkvelishvili</h3>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3eoJW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3CAVS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2sx0_\"};"],"sourceRoot":""}